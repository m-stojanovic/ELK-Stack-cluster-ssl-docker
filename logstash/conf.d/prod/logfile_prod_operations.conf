input {
    kafka{
        bootstrap_servers => "kafka-broker-1.devopslearning.rs:9092,kafka-broker-2.devopslearning.rs:9093,kafka-broker-3.devopslearning.rs:9094"
        group_id => "logfile-operations-prod"
        client_id => "logfile-operations-prod"
        max_poll_interval_ms => 600000
        consumer_threads => 3
        topics => ["db-message-prod-logs"]
        security_protocol => "SSL"
        ssl_key_password => "DevopsPass!"
        ssl_keystore_location => "/etc/logstash/ssl/kafka_ssl/client.keystore.jks"
        ssl_keystore_password => "DevopsPass!"
        ssl_truststore_location => "/etc/logstash/ssl/kafka_ssl/client.truststore.jks"
        ssl_truststore_password => "DevopsPass!"
        ssl_endpoint_identification_algorithm => " "
    }
}
filter{
  grok{
    match=>{"message"=>"%{USERNAME:hostname} (?<ts>\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\w{0,2}) (?:\[%{WORD:severity}\]) (?<duration>dur=[^\s]*) (?<trash>ServerInfo\()(?<server_id>\d{0,3}.\d{0,3}.\d{0,3}.\d{0,3}( \d{0,3}.\d{0,3}.\d{0,3}.\d{0,3})*) (?<server_type>\b\w+\b) (?<environment>[^\)]*)\) %{GREEDYDATA:op_message}"}
  }
  mutate{
    remove_field => ["message","trash","hostname"]
  }
  mutate{
    rename => ["op_message","message"]
    gsub => ["duration","dur=",""]
  }
  if "_grokparsefailure" in [tags] { drop {} }
}
output {
       elasticsearch {
             hosts => "https://elastic-stack.devopslearning.rs:9200"
             user => "elastic"
             password => "DevopsPass!"
             ssl => true
             ssl_certificate_verification => true
             cacert => "/etc/ssl/certs/ca-certificates.crt"
	     index=>"db_operation_prod_logs-%{+YYYY.MM.dd}"
       }
}
