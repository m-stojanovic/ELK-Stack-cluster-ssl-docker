input {
    kafka{
        bootstrap_servers => "kafka-broker-1.devopslearning.xyz:9092,kafka-broker-2.devopslearning.xyz:9093,kafka-broker-3.devopslearning.xyz:9094"
        group_id => "redhat"
        client_id => "redhat1"
        consumer_threads => 3
        topics => ["redhat-secure-logs"]
        type => "secure"
        security_protocol => "SSL"
        ssl_key_password => "{{ kafka_ssl_password }}"
        ssl_keystore_location => "/etc/logstash/ssl/kafka_ssl/client.keystore.jks"
        ssl_keystore_password => "{{ kafka_ssl_password }}"
        ssl_truststore_location => "/etc/logstash/ssl/kafka_ssl/client.truststore.jks"
        ssl_truststore_password => "{{ kafka_ssl_password }}"
        ssl_endpoint_identification_algorithm => " "
    }
    kafka{
        bootstrap_servers => "kafka-broker-1.devopslearning.xyz:9092,kafka-broker-2.devopslearning.xyz:9093,kafka-broker-3.devopslearning.xyz:9094"
        group_id => "redhat"
        client_id => "redhat2"
        consumer_threads => 3
        topics => ["redhat-message-logs"]
        type => "dev"
        security_protocol => "SSL"
        ssl_key_password => "{{ kafka_ssl_password }}"
        ssl_keystore_location => "/etc/logstash/ssl/kafka_ssl/client.keystore.jks"
        ssl_keystore_password => "{{ kafka_ssl_password }}"
        ssl_truststore_location => "/etc/logstash/ssl/kafka_ssl/client.truststore.jks"
        ssl_truststore_password => "{{ kafka_ssl_password }}"
        ssl_endpoint_identification_algorithm => " "
    }
}
filter {
     if [type] == "message" {
         grok {
            match => { "message" => "%{SYSLOGBASE} %{GREEDYDATA:system_message}" }
         }
         mutate {
              rename => [ "logsource", "hostname" ]
              remove_field => [ "message" ]
         }
     }
     if [type] == "secure" {
         grok {
            match => { "message" => "%{SYSLOGBASE} Accepted %{WORD:auth_method} for %{USER:user} from %{IP:src_ip} port %{INT:src_port} ssh2" }
        }
        mutate {
             rename => [ "logsource", "hostname" ]
        }
        if "_grokparsefailure" in [tags] {
            grok {
               match => { "message" => "%{SYSLOGBASE} %{GREEDYDATA:secure_message}" }
            }
        }
        mutate {
             remove_field => [ "message", "tags" ]
             rename => [ "logsource", "hostname" ]
        }
    }
}
output {
    if [type] == "secure" {
         elasticsearch  {
             hosts => "https://devopslearning.xyz:9200"
             user => "elastic"
             password => "{{ elk_password }}"
             ssl => true
             ssl_certificate_verification => true
             cacert => "/etc/ssl/certs/ca-certificates.crt"
            index => "redhat-secure-logs"
             codec => "json"
         }
    }
    if [type] == "message" {
         elasticsearch {
             hosts => "https://devopslearning.xyz:9200"
             user => "elastic"
             password => "{{ elk_password }}"
             ssl => true
             ssl_certificate_verification => true
             cacert => "/etc/ssl/certs/ca-certificates.crt"
             index => "redhat-message-logs"
             codec => "json"
         }
    }
}
